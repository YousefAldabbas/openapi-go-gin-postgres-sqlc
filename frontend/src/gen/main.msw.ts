/**
 * Generated by orval v6.10.3 🍺
 * Do not edit manually.
 * OpenAPI openapi-go-gin-postgres-sqlc
 * openapi-go-gin-postgres-sqlc
 * OpenAPI spec version: 2.0.0
 */
import { rest } from 'msw'
import { faker } from '@faker-js/faker'
import { Role, Scope } from './model'

export const getEventsMock = () => faker.random.word()

export const getPingMock = () => faker.random.word()

export const getOpenapiYamlGetMock = () => faker.random.word()

export const getAdminPingMock = () => faker.random.word()

export const getGetCurrentUserMock = () => ({
  apiKey: faker.helpers.arrayElement([
    {
      apiKey: faker.random.word(),
      expiresOn: `${faker.date.past().toISOString().split('.')[0]}Z`,
      userID: faker.random.word(),
    },
    undefined,
  ]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
  email: faker.random.word(),
  firstName: faker.helpers.arrayElement([faker.random.word(), null]),
  fullName: faker.helpers.arrayElement([faker.random.word(), null]),
  hasGlobalNotifications: faker.datatype.boolean(),
  hasPersonalNotifications: faker.datatype.boolean(),
  lastName: faker.helpers.arrayElement([faker.random.word(), null]),
  role: faker.helpers.arrayElement(Object.values(Role)),
  scopes: faker.helpers.arrayElements(Object.values(Scope)),
  teams: faker.helpers.arrayElement([
    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      description: faker.random.word(),
      name: faker.random.word(),
      projectID: faker.datatype.number({ min: undefined, max: undefined }),
      teamID: faker.datatype.number({ min: undefined, max: undefined }),
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    })),
    undefined,
  ]),
  userID: faker.random.word(),
  username: faker.random.word(),
})

export const getUpdateUserMock = () => ({
  apiKey: faker.helpers.arrayElement([
    {
      apiKey: faker.random.word(),
      expiresOn: `${faker.date.past().toISOString().split('.')[0]}Z`,
      userID: faker.random.word(),
    },
    undefined,
  ]),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]),
  email: faker.random.word(),
  firstName: faker.helpers.arrayElement([faker.random.word(), null]),
  fullName: faker.helpers.arrayElement([faker.random.word(), null]),
  hasGlobalNotifications: faker.datatype.boolean(),
  hasPersonalNotifications: faker.datatype.boolean(),
  lastName: faker.helpers.arrayElement([faker.random.word(), null]),
  role: faker.helpers.arrayElement(Object.values(Role)),
  scopes: faker.helpers.arrayElements(Object.values(Scope)),
  teams: faker.helpers.arrayElement([
    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      description: faker.random.word(),
      name: faker.random.word(),
      projectID: faker.datatype.number({ min: undefined, max: undefined }),
      teamID: faker.datatype.number({ min: undefined, max: undefined }),
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    })),
    undefined,
  ]),
  userID: faker.random.word(),
  username: faker.random.word(),
})

export const getGetProjectBoardMock = () => ({
  activities: faker.helpers.arrayElement([
    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      activityID: faker.datatype.number({ min: undefined, max: undefined }),
      description: faker.random.word(),
      isProductive: faker.datatype.boolean(),
      name: faker.random.word(),
      projectID: faker.datatype.number({ min: undefined, max: undefined }),
    })),
    undefined,
  ]),
  kanbanSteps: faker.helpers.arrayElement([
    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      color: faker.random.word(),
      description: faker.random.word(),
      kanbanStepID: faker.datatype.number({ min: undefined, max: undefined }),
      name: faker.random.word(),
      projectID: faker.datatype.number({ min: undefined, max: undefined }),
      stepOrder: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), null]),
      timeTrackable: faker.datatype.boolean(),
    })),
    undefined,
  ]),
  project: faker.helpers.arrayElement([
    {
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      description: faker.random.word(),
      initialized: faker.datatype.boolean(),
      name: faker.random.word(),
      projectID: faker.datatype.number({ min: undefined, max: undefined }),
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    },
    undefined,
  ]),
  teams: faker.helpers.arrayElement([
    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      description: faker.random.word(),
      name: faker.random.word(),
      projectID: faker.datatype.number({ min: undefined, max: undefined }),
      teamID: faker.datatype.number({ min: undefined, max: undefined }),
      updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
    })),
    undefined,
  ]),
  workItemTags: faker.helpers.arrayElement([
    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      color: faker.random.word(),
      description: faker.random.word(),
      name: faker.random.word(),
      projectID: faker.datatype.number({ min: undefined, max: undefined }),
      workItemTagID: faker.datatype.number({ min: undefined, max: undefined }),
    })),
    undefined,
  ]),
  workItemTypes: faker.helpers.arrayElement([
    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      color: faker.random.word(),
      description: faker.random.word(),
      name: faker.random.word(),
      projectID: faker.datatype.number({ min: undefined, max: undefined }),
      workItemTypeID: faker.datatype.number({ min: undefined, max: undefined }),
    })),
    undefined,
  ]),
})

export const getOpenAPIOpenapiGoGinPostgresSqlcMSW = () => [
  rest.get('*/auth/myprovider/callback', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
  }),
  rest.get('*/auth/myprovider/login', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
  }),
  rest.get('*/events', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getEventsMock()))
  }),
  rest.get('*/ping', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.text(getPingMock()))
  }),
  rest.get('*/openapi.yaml', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getOpenapiYamlGetMock()))
  }),
  rest.get('*/admin/ping', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.text(getAdminPingMock()))
  }),
  rest.get('*/user/me', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetCurrentUserMock()))
  }),
  rest.patch('*/user/:id/authorization', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
  }),
  rest.delete('*/user/:id', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
  }),
  rest.patch('*/user/:id', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getUpdateUserMock()))
  }),
  rest.post('*/project/:id/initialize', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'))
  }),
  rest.get('*/project/:id/board', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getGetProjectBoardMock()))
  }),
]
