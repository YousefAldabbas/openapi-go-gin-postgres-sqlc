#!/bin/bash

set -e

export GIT_USER_ID=danicc097
export GIT_REPO_ID=openapi-go-gin-postgres-sqlc
export GO_POST_PROCESS_FILE="/usr/bin/env gofmt -w -s"

SPEC="openapi.yaml"
GEN_OUT_DIR="internal"
PWD="$(pwd)"
export GENVERS=6.0.1

x.fetch.jar() {
  local url="https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/$GENVERS/openapi-generator-cli-$GENVERS.jar"
  echo "$url > openapi-generator-cli.jar"
  curl -L "$url" -o openapi-generator-cli.jar
}

# x.openapi() {
#   docker run --rm \
#     -v "${PWD}/internal:/local" \
#     -e GO_POST_PROCESS_FILE="/usr/bin/env gofmt -w -s" \
#     -e "GIT_USER_ID=$GIT_USER_ID" \
#     -e "GIT_REPO_ID=$GIT_REPO_ID" \
#     openapitools/openapi-generator-cli "$@"
# }

x.validate() {
  java -jar openapi-generator-cli.jar validate -i "$SPEC"
}

x.generate-api() {
  echo $GIT_USER_ID $GIT_REPO_ID
  echo Generating API from "$SPEC"
  java -jar openapi-generator-cli.jar generate -g go-gin-server -i "$SPEC" -o "$GEN_OUT_DIR" --additional-properties=packageName=openapi,apiPath=gen -t internal/go-gin-server-templates >/dev/null
  gofmt -w -s "$GEN_OUT_DIR"
  mkdir -p "$GEN_OUT_DIR"/gen/models
  mv "$GEN_OUT_DIR"/gen/model_*.go "$GEN_OUT_DIR"/gen/models
  # not needed with locally generated code
  # local name="$(id -un)"
  # sudo chown -R "$name:$name" "$GEN_OUT_DIR"
  cp internal/static/swagger-override/swagger-initializer.js internal/static/swagger-ui/
  cp "$SPEC" "$PWD"/internal/static/swagger-ui
  go build -o post-generate-api "$PWD"/cmd/post-generate-api/main.go
  ./post-generate-api
  find "$GEN_OUT_DIR/gen/" -name "api_*.go" -type f -delete
}

x.generate-sqlc() {
  bin/scripts/sql-format.sh
  cd internal/services && sqlc generate && cd - || exit
}

x.build() {
  x.generate-api
  go build -o openapi-go-gin-postgres-sqlc "$PWD"/cmd/rest-server/main.go
}

x.run() {
  docker-compose up -d &
  x.build
  ./openapi-go-gin-postgres-sqlc
}

x.download_swagger_ui() {
  name="$(curl --silent "https://api.github.com/repos/swagger-api/swagger-ui/releases/latest" | jq -r ".. .tag_name? // empty")"
  curl -fsSL "github.com/swagger-api/swagger-ui/archive/refs/tags/$name.tar.gz" -o swagger-ui.tar.gz
  tar xf swagger-ui.tar.gz swagger-ui-"${name#*v}"/dist --one-top-level=swagger-ui --strip-components=2
  rm swagger-ui.tar.gz
  mkdir -p internal/static/swagger-ui
  mv swagger-ui/* internal/static/swagger-ui/
  rm -r swagger-ui
}

x.migrate() {
  # TODO read .env
  migrate -path db/migrations/ -database postgres://postgres:postgres@localhost:5555/postgres?sslmode=disable "$*"
}

x.create_migration() {
  migrate create -ext sql -dir db/migrations/ "$*"
}

# --------------------- completion and delegation --------------------
#      `complete -C foo foo` > `source <(foo bloated_completion)`

while IFS= read -r line; do
  [[ $line =~ ^declare\ -f\ x\. ]] || continue
  COMMANDS+=("${line##declare -f x.}")
done < <(declare -F)
mapfile -t COMMANDS < \
  <(LC_COLLATE=C sort < <(printf "%s\n" "${COMMANDS[@]}"))

if [[ -n $COMP_LINE ]]; then
  line=${COMP_LINE#* }
  for c in "${COMMANDS[@]}"; do
    [[ ${c:0:${#line}} == "${line,,}" ]] && echo "$c"
  done
  exit
fi

for c in "${COMMANDS[@]}"; do
  if [[ $c == "$EXE" ]]; then
    "x.$EXE" "$@"
    exit $?
  fi
done

if [[ -n "$1" ]]; then
  declare CMD="$1"
  shift
  for c in "${COMMANDS[@]}"; do
    declare cmd=$(command -v "x.$c")
    if [[ $c == "$CMD" && -n "$cmd" ]]; then
      "x.$CMD" "$@"
      exit $?
    fi
  done
fi
