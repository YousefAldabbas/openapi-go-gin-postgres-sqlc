// Code generated by openapi-generator. DO NOT EDIT.

package handlers

import (
	"net/http"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/rest"
	services "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/services"
	"github.com/gin-gonic/gin"
)

// Default handles routes with the default tag.
type Default struct {
	svc services.Default
	// add your own services, etc. as required
}

// NewDefault returns a new handler for default.
// Edit as required
// TODO rewriting handler methods based on current postgen:
// see https://eli.thegreenplace.net/2021/rewriting-go-source-code-with-ast-tooling/
// simpler solutions based on drawbacks (complicated, comments not attached to nodes):
// - https://github.com/dave/dst
// - https://github.com/uber-go/gopatch
func NewDefault(svc services.Default) *Default {
	return &Default{
		svc: svc,
	}
}

// Register connects the handlers to a router with the given middleware.
func (t *Default) Register(r *gin.RouterGroup, mws []gin.HandlerFunc) {
	routes := []rest.Route{
		{
			Name:        "OpenapiYamlGet",
			Method:      http.MethodGet,
			Pattern:     "/openapi.yaml",
			HandlerFunc: t.openapiYamlGet,
			Middlewares: []gin.HandlerFunc{},
		},
		{
			Name:        "Ping",
			Method:      http.MethodGet,
			Pattern:     "/ping",
			HandlerFunc: t.ping,
			Middlewares: []gin.HandlerFunc{},
		},
	}

	rest.RegisterRoutes(r, routes, "/default", mws)
}

// openapiYamlGet returns this very openapi spec..
func (t *Default) openapiYamlGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ping ping pongs.
func (t *Default) ping(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}
