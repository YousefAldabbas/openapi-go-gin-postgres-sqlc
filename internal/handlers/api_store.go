// Code generated by openapi-generator. DO NOT EDIT.

package handlers

import (
	"net/http"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/rest"
	services "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/services"
	"github.com/gin-gonic/gin"
)

// Store handles routes with the store tag.
type Store struct {
	svc services.Store
	// add your own services, etc. as required
}

// NewStore returns a new handler for store.
// Edit as required
// TODO rewriting handler methods based on current postgen:
// see https://eli.thegreenplace.net/2021/rewriting-go-source-code-with-ast-tooling/
// simpler solutions based on drawbacks (complicated, comments not attached to nodes):
// - https://github.com/dave/dst
// - https://github.com/uber-go/gopatch
func NewStore(svc services.Store) *Store {
	return &Store{
		svc: svc,
	}
}

// Register connects the handlers to a router with the given middleware.
func (t *Store) Register(r *gin.RouterGroup, mws []gin.HandlerFunc) {
	routes := []rest.Route{
		{
			Name:        "DeleteOrder",
			Method:      http.MethodDelete,
			Pattern:     "/store/order/:orderId",
			HandlerFunc: t.deleteOrder,
			Middlewares: []gin.HandlerFunc{},
		},
		{
			Name:        "GetInventory",
			Method:      http.MethodGet,
			Pattern:     "/store/inventory",
			HandlerFunc: t.getInventory,
			Middlewares: []gin.HandlerFunc{},
		},
		{
			Name:        "GetOrderById",
			Method:      http.MethodGet,
			Pattern:     "/store/order/:orderId",
			HandlerFunc: t.getOrderById,
			Middlewares: []gin.HandlerFunc{},
		},
		{
			Name:        "PlaceOrder",
			Method:      http.MethodPost,
			Pattern:     "/store/order",
			HandlerFunc: t.placeOrder,
			Middlewares: []gin.HandlerFunc{},
		},
	}

	rest.RegisterRoutes(r, routes, "/store", mws)
}

// deleteOrder delete purchase order by id.
func (t *Store) deleteOrder(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// getInventory returns pet inventories by status.
func (t *Store) getInventory(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// getOrderById find purchase order by id.
func (t *Store) getOrderById(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// placeOrder place an order for a pet.
func (t *Store) placeOrder(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}
