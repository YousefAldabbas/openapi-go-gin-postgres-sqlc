// Code generated by openapi-generator. DO NOT EDIT.

package handlers

import (
	"net/http"

	gen "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/gen"
	services "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/services"
	"github.com/gin-gonic/gin"
	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/static"

)

// DocsApi handles routes with the DocsApi tag.
type DocsApi struct {
	svc services.DocsApi
	// add your own services, etc. as required
}

// NewDocsApi returns a new handler for DocsApi.
// Edit as required
// TODO rewriting handler methods based on current postgen:
// see https://eli.thegreenplace.net/2021/rewriting-go-source-code-with-ast-tooling/
// simpler solutions based on drawbacks (complicated, comments not attached to nodes):
// - https://github.com/dave/dst
// - https://github.com/uber-go/gopatch
func NewDocsApi(svc services.DocsApi) *DocsApi {
	return &DocsApi{
		svc: svc,
	}
}

// Register connects the handlers to a router.
func (t *DocsApi) Register(r *gin.Engine) {
	gen.RegisterRoute(r, gen.Route{
		Name:        "OpenapiYamlGet",
		Method:      http.MethodGet,
		Pattern:     "/v2/openapi.yaml",
		HandlerFunc: t.OpenapiYamlGet,
	})
}

// OpenapiYamlGet returns this very openapi spec..
func (t *DocsApi) OpenapiYamlGet(c *gin.Context) {
	c.Header("Content-Type", "application/x-yaml")

	oas, err := static.SwaggerUI.ReadFile("swagger-ui/openapi.yaml")
	if err != nil {
		panic("openapi spec not found")
	}

	c.String(http.StatusOK, string(oas))
}
