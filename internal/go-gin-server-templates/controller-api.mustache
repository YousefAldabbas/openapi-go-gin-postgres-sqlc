{{>partial_header}}
package handlers

{{#operations}}
import (
	"net/http"

	"github.com/gin-gonic/gin"
	services "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/services"
	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/rest"
)

{{! The things one must do to not touch Java. }}
// {{#lambda.titlecase}}{{#operation.0}}{{#tags}}{{name}}{{/tags}}{{/operation.0}}{{/lambda.titlecase}} handles routes with the {{#operation.0}}{{#tags}}{{name}}{{/tags}}{{/operation.0}} tag.
type {{#lambda.titlecase}}{{#operation.0}}{{#tags}}{{name}}{{/tags}}{{/operation.0}}{{/lambda.titlecase}} struct {
	svc services.{{#lambda.titlecase}}{{#operation.0}}{{#tags}}{{name}}{{/tags}}{{/operation.0}}{{/lambda.titlecase}}
  // add your own services, etc. as required
}

// New{{#lambda.titlecase}}{{#operation.0}}{{#tags}}{{name}}{{/tags}}{{/operation.0}}{{/lambda.titlecase}} returns a new handler for {{#operation.0}}{{#tags}}{{name}}{{/tags}}{{/operation.0}}.
// Edit as required
// TODO rewriting handler methods based on current postgen:
// see https://eli.thegreenplace.net/2021/rewriting-go-source-code-with-ast-tooling/
// simpler solutions based on drawbacks (complicated, comments not attached to nodes):
// - https://github.com/dave/dst
// - https://github.com/uber-go/gopatch
func New{{#lambda.titlecase}}{{#operation.0}}{{#tags}}{{name}}{{/tags}}{{/operation.0}}{{/lambda.titlecase}}(svc services.{{#lambda.titlecase}}{{#operation.0}}{{#tags}}{{name}}{{/tags}}{{/operation.0}}{{/lambda.titlecase}}) *{{#lambda.titlecase}}{{#operation.0}}{{#tags}}{{name}}{{/tags}}{{/operation.0}}{{/lambda.titlecase}} {
	return &{{#lambda.titlecase}}{{#operation.0}}{{#tags}}{{name}}{{/tags}}{{/operation.0}}{{/lambda.titlecase}}{
		svc: svc,
	}
}

// Register connects the handlers to a router with the given middleware.
func (t *{{#lambda.titlecase}}{{#operation.0}}{{#tags}}{{name}}{{/tags}}{{/operation.0}}{{/lambda.titlecase}}) Register(r *gin.RouterGroup, mws []gin.HandlerFunc) {
  routes := []rest.Route{
{{#operation}}
	{
    Name: "{{operationId}}",
    Method: http.Method{{httpMethod}},
    Pattern: "{{{path}}}",
    HandlerFunc: t.{{#lambda.camelcase}}{{nickname}}{{/lambda.camelcase}},
    Middlewares: []gin.HandlerFunc{},
  },
{{/operation}}
  }
{{#operation.0}}

  rest.RegisterRoutes(r, routes, "/{{#tags}}{{name}}{{/tags}}", mws)
{{/operation.0}}
}

{{#operation}}
// {{#lambda.camelcase}}{{nickname}}{{/lambda.camelcase}} {{#lambda.lowercase}}{{{summary}}}{{/lambda.lowercase}}.
{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
func (t *{{#lambda.titlecase}}{{#operation.0}}{{#tags}}{{name}}{{/tags}}{{/operation.0}}{{/lambda.titlecase}}) {{#lambda.camelcase}}{{nickname}}{{/lambda.camelcase}}(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}
{{/operation}}
{{/operations}}

