{{! The things one must do to not touch Java. }}
package rest

{{#operations}}
import (
	"net/http"

	"github.com/gin-gonic/gin"
	services "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/services"
)

// {{baseName}} handles routes with the '{{#lambda.lowercase}}{{{baseName}}}{{/lambda.lowercase}}' tag.
type {{baseName}} struct {
	svc services.{{baseName}}
  // add or remove services, etc. as required
}

// New{{baseName}} returns a new handler for the '{{#lambda.lowercase}}{{{baseName}}}{{/lambda.lowercase}}' route group.
func New{{baseName}}(svc services.{{baseName}}) *{{baseName}} {
	return &{{baseName}}{
		svc: svc,
	}
}

// Register connects handlers to an existing router group with the given middlewares.
// Generated method. DO NOT EDIT.
func (h *{{baseName}}) Register(r *gin.RouterGroup, mws []gin.HandlerFunc) {
  routes := []route{
{{#operation}}
	{
    Name: string({{#lambda.camelcase}}{{{operationId}}}{{/lambda.camelcase}}),
    Method: http.Method{{httpMethod}},
    Pattern: "{{{path}}}",
    HandlerFunc: h.{{#lambda.camelcase}}{{{nickname}}}{{/lambda.camelcase}},
    Middlewares: h.middlewares({{#lambda.camelcase}}{{{operationId}}}{{/lambda.camelcase}}),
  },
{{/operation}}
  }
{{! hack since baseName is broken for the default tag }}
{{#operation.0}}

  registerRoutes(r, routes, "/{{#tags}}{{name}}{{/tags}}", mws)
}

// middlewares returns individual route middleware per operation id.
func (h *{{baseName}}) middlewares(opID {{#tags}}{{name}}{{/tags}}OpID) []gin.HandlerFunc {
	switch opID {
	default:
		return []gin.HandlerFunc{}
	}
}
{{/operation.0}}

{{#operation}}
// {{#lambda.camelcase}}{{{nickname}}}{{/lambda.camelcase}} {{#lambda.lowercase}}{{{summary}}}{{/lambda.lowercase}}.
{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
func (h *{{baseName}}) {{#lambda.camelcase}}{{{nickname}}}{{/lambda.camelcase}}(c *gin.Context) {
	c.String(http.StatusNotImplemented, "501 not implemented")
}
{{/operation}}
{{/operations}}

