package handlers

{{#operations}}
import (
	"net/http"

	"github.com/gin-gonic/gin"
	services "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/services"
	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/rest"
)

{{! The things one must do to not touch Java. }}
// {{baseName}} handles routes with the '{{#lambda.lowercase}}{{{baseName}}}{{/lambda.lowercase}}' tag.
type {{baseName}} struct {
	svc services.{{baseName}}
  // add necessary services, etc. as required
}

// New{{baseName}} returns a new handler for the '{{#lambda.lowercase}}{{{baseName}}}{{/lambda.lowercase}}' route group.
// Edit as required.
func New{{baseName}}(svc services.{{baseName}}) *{{baseName}} {
	return &{{baseName}}{
		svc: svc,
	}
}

// Register connects the handlers to a router with the given middleware.
// GENERATED METHOD. Only Middlewares will be saved between runs.
func (t *{{baseName}}) Register(r *gin.RouterGroup, mws []gin.HandlerFunc) {
  routes := []rest.Route{
{{#operation}}
	{
    Name: "{{operationId}}",
    Method: http.Method{{httpMethod}},
    Pattern: "{{{path}}}",
    HandlerFunc: t.{{nickname}},
    Middlewares: []gin.HandlerFunc{},
  },
{{/operation}}
  }
{{#operation.0}}
{{! baseName doesn't work with default tag }}
  rest.RegisterRoutes(r, routes, "/{{#tags}}{{name}}{{/tags}}", mws)
{{/operation.0}}
}

{{#operation}}
// {{nickname}} {{#lambda.lowercase}}{{{summary}}}{{/lambda.lowercase}}.
{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
func (t *{{baseName}}) {{nickname}}(c *gin.Context) {
	c.String(http.StatusNotImplemented, "501 not implemented")
}
{{/operation}}
{{/operations}}

