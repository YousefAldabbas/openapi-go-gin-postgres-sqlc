// Code generated by gowrap. DO NOT EDIT.
// template: ../../gowrap-templates/otel.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package reposwrappers

import (
	"context"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos"
	db "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/db"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)

// ProjectBoardWithTracing implements repos.ProjectBoard interface instrumented with opentracing spans
type ProjectBoardWithTracing struct {
	repos.ProjectBoard
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewProjectBoardWithTracing returns ProjectBoardWithTracing
func NewProjectBoardWithTracing(base repos.ProjectBoard, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) ProjectBoardWithTracing {
	d := ProjectBoardWithTracing{
		ProjectBoard: base,
		_instance:    instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// ByID implements repos.ProjectBoard
func (_d ProjectBoardWithTracing) ByID(ctx context.Context, d db.DBTX, projectID int) (pp1 *repomodels.ProjectBoard, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "repos.ProjectBoard.ByID")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":       ctx,
				"d":         d,
				"projectID": projectID}, map[string]interface{}{
				"pp1": pp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.ProjectBoard.ByID(ctx, d, projectID)
}

// Create implements repos.ProjectBoard
func (_d ProjectBoardWithTracing) Create(ctx context.Context, d db.DBTX, params repos.ProjectBoardCreateParams) (pp1 *repomodels.ProjectBoard, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "repos.ProjectBoard.Create")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":    ctx,
				"d":      d,
				"params": params}, map[string]interface{}{
				"pp1": pp1,
				"err": err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.ProjectBoard.Create(ctx, d, params)
}
