// Code generated by gowrap. DO NOT EDIT.
// template: ../../gowrap-templates/timeout.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package reposwrappers

import (
	"context"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos"
	db "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/db"
)

// ProjectBoardWithTimeout implements repos.ProjectBoard interface instrumented with timeouts
type ProjectBoardWithTimeout struct {
	repos.ProjectBoard
	config ProjectBoardWithTimeoutConfig
}

type ProjectBoardWithTimeoutConfig struct {
	ByIDTimeout time.Duration

	CreateTimeout time.Duration
}

// NewProjectBoardWithTimeout returns ProjectBoardWithTimeout
func NewProjectBoardWithTimeout(base repos.ProjectBoard, config ProjectBoardWithTimeoutConfig) ProjectBoardWithTimeout {
	return ProjectBoardWithTimeout{
		ProjectBoard: base,
		config:       config,
	}
}

// ByID implements repos.ProjectBoard
func (_d ProjectBoardWithTimeout) ByID(ctx context.Context, d db.DBTX, projectID int) (pp1 *repomodels.ProjectBoard, err error) {
	var cancelFunc func()
	if _d.config.ByIDTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.ByIDTimeout)
		defer cancelFunc()
	}
	return _d.ProjectBoard.ByID(ctx, d, projectID)
}

// Create implements repos.ProjectBoard
func (_d ProjectBoardWithTimeout) Create(ctx context.Context, d db.DBTX, params repos.ProjectBoardCreateParams) (pp1 *repomodels.ProjectBoard, err error) {
	var cancelFunc func()
	if _d.config.CreateTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.CreateTimeout)
		defer cancelFunc()
	}
	return _d.ProjectBoard.Create(ctx, d, params)
}
