// Code generated by gowrap. DO NOT EDIT.
// template: ../../gowrap-templates/timeout.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package reposwrappers

import (
	"context"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos"
	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/db"
)

// WorkItemTypeWithTimeout implements repos.WorkItemType interface instrumented with timeouts
type WorkItemTypeWithTimeout struct {
	repos.WorkItemType
	config WorkItemTypeWithTimeoutConfig
}

type WorkItemTypeWithTimeoutConfig struct {
	CreateTimeout time.Duration

	DeleteTimeout time.Duration

	UpdateTimeout time.Duration

	WorkItemTypeByIDTimeout time.Duration

	WorkItemTypeByNameTimeout time.Duration
}

// NewWorkItemTypeWithTimeout returns WorkItemTypeWithTimeout
func NewWorkItemTypeWithTimeout(base repos.WorkItemType, config WorkItemTypeWithTimeoutConfig) WorkItemTypeWithTimeout {
	return WorkItemTypeWithTimeout{
		WorkItemType: base,
		config:       config,
	}
}

// Create implements repos.WorkItemType
func (_d WorkItemTypeWithTimeout) Create(ctx context.Context, d db.DBTX, params repos.WorkItemTypeCreateParams) (wp1 *db.WorkItemType, err error) {
	var cancelFunc func()
	if _d.config.CreateTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.CreateTimeout)
		defer cancelFunc()
	}
	return _d.WorkItemType.Create(ctx, d, params)
}

// Delete implements repos.WorkItemType
func (_d WorkItemTypeWithTimeout) Delete(ctx context.Context, d db.DBTX, id int) (wp1 *db.WorkItemType, err error) {
	var cancelFunc func()
	if _d.config.DeleteTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.DeleteTimeout)
		defer cancelFunc()
	}
	return _d.WorkItemType.Delete(ctx, d, id)
}

// Update implements repos.WorkItemType
func (_d WorkItemTypeWithTimeout) Update(ctx context.Context, d db.DBTX, id int, params repos.WorkItemTypeUpdateParams) (wp1 *db.WorkItemType, err error) {
	var cancelFunc func()
	if _d.config.UpdateTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.UpdateTimeout)
		defer cancelFunc()
	}
	return _d.WorkItemType.Update(ctx, d, id, params)
}

// WorkItemTypeByID implements repos.WorkItemType
func (_d WorkItemTypeWithTimeout) WorkItemTypeByID(ctx context.Context, d db.DBTX, id int) (wp1 *db.WorkItemType, err error) {
	var cancelFunc func()
	if _d.config.WorkItemTypeByIDTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.WorkItemTypeByIDTimeout)
		defer cancelFunc()
	}
	return _d.WorkItemType.WorkItemTypeByID(ctx, d, id)
}

// WorkItemTypeByName implements repos.WorkItemType
func (_d WorkItemTypeWithTimeout) WorkItemTypeByName(ctx context.Context, d db.DBTX, name string, projectID int) (wp1 *db.WorkItemType, err error) {
	var cancelFunc func()
	if _d.config.WorkItemTypeByNameTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.WorkItemTypeByNameTimeout)
		defer cancelFunc()
	}
	return _d.WorkItemType.WorkItemTypeByName(ctx, d, name, projectID)
}
