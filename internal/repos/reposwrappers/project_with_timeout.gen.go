// Code generated by gowrap. DO NOT EDIT.
// template: ../../gowrap-templates/timeout.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package reposwrappers

import (
	"context"
	"time"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos"
	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/repos/postgresql/gen/db"
)

// ProjectWithTimeout implements repos.Project interface instrumented with timeouts
type ProjectWithTimeout struct {
	repos.Project
	config ProjectWithTimeoutConfig
}

type ProjectWithTimeoutConfig struct {
	ProjectByIDTimeout time.Duration

	ProjectByNameTimeout time.Duration
}

// NewProjectWithTimeout returns ProjectWithTimeout
func NewProjectWithTimeout(base repos.Project, config ProjectWithTimeoutConfig) ProjectWithTimeout {
	return ProjectWithTimeout{
		Project: base,
		config:  config,
	}
}

// ProjectByID implements repos.Project
func (_d ProjectWithTimeout) ProjectByID(ctx context.Context, d db.DBTX, id int) (pp1 *db.Project, err error) {
	var cancelFunc func()
	if _d.config.ProjectByIDTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.ProjectByIDTimeout)
		defer cancelFunc()
	}
	return _d.Project.ProjectByID(ctx, d, id)
}

// ProjectByName implements repos.Project
func (_d ProjectWithTimeout) ProjectByName(ctx context.Context, d db.DBTX, name string) (pp1 *db.Project, err error) {
	var cancelFunc func()
	if _d.config.ProjectByNameTimeout > 0 {
		ctx, cancelFunc = context.WithTimeout(ctx, _d.config.ProjectByNameTimeout)
		defer cancelFunc()
	}
	return _d.Project.ProjectByName(ctx, d, name)
}
