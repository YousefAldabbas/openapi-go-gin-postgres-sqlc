//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Project2WorkItems = newProject2WorkItemsTable("public", "project_2_work_items", "")

type project2WorkItemsTable struct {
	postgres.Table

	//Columns
	WorkItemID            postgres.ColumnInteger
	CustomDateForProject2 postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type Project2WorkItemsTable struct {
	project2WorkItemsTable

	EXCLUDED project2WorkItemsTable
}

// AS creates new Project2WorkItemsTable with assigned alias
func (a Project2WorkItemsTable) AS(alias string) *Project2WorkItemsTable {
	return newProject2WorkItemsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new Project2WorkItemsTable with assigned schema name
func (a Project2WorkItemsTable) FromSchema(schemaName string) *Project2WorkItemsTable {
	return newProject2WorkItemsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new Project2WorkItemsTable with assigned table prefix
func (a Project2WorkItemsTable) WithPrefix(prefix string) *Project2WorkItemsTable {
	return newProject2WorkItemsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new Project2WorkItemsTable with assigned table suffix
func (a Project2WorkItemsTable) WithSuffix(suffix string) *Project2WorkItemsTable {
	return newProject2WorkItemsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProject2WorkItemsTable(schemaName, tableName, alias string) *Project2WorkItemsTable {
	return &Project2WorkItemsTable{
		project2WorkItemsTable: newProject2WorkItemsTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newProject2WorkItemsTableImpl("", "excluded", ""),
	}
}

func newProject2WorkItemsTableImpl(schemaName, tableName, alias string) project2WorkItemsTable {
	var (
		WorkItemIDColumn            = postgres.IntegerColumn("work_item_id")
		CustomDateForProject2Column = postgres.TimestampzColumn("custom_date_for_project_2")
		allColumns                  = postgres.ColumnList{WorkItemIDColumn, CustomDateForProject2Column}
		mutableColumns              = postgres.ColumnList{CustomDateForProject2Column}
	)

	return project2WorkItemsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		WorkItemID:            WorkItemIDColumn,
		CustomDateForProject2: CustomDateForProject2Column,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
