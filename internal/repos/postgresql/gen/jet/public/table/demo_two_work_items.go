//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var DemoTwoWorkItems = newDemoTwoWorkItemsTable("public", "demo_two_work_items", "")

type demoTwoWorkItemsTable struct {
	postgres.Table

	// Columns
	WorkItemID            postgres.ColumnInteger
	CustomDateForProject2 postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DemoTwoWorkItemsTable struct {
	demoTwoWorkItemsTable

	EXCLUDED demoTwoWorkItemsTable
}

// AS creates new DemoTwoWorkItemsTable with assigned alias
func (a DemoTwoWorkItemsTable) AS(alias string) *DemoTwoWorkItemsTable {
	return newDemoTwoWorkItemsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DemoTwoWorkItemsTable with assigned schema name
func (a DemoTwoWorkItemsTable) FromSchema(schemaName string) *DemoTwoWorkItemsTable {
	return newDemoTwoWorkItemsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DemoTwoWorkItemsTable with assigned table prefix
func (a DemoTwoWorkItemsTable) WithPrefix(prefix string) *DemoTwoWorkItemsTable {
	return newDemoTwoWorkItemsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DemoTwoWorkItemsTable with assigned table suffix
func (a DemoTwoWorkItemsTable) WithSuffix(suffix string) *DemoTwoWorkItemsTable {
	return newDemoTwoWorkItemsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDemoTwoWorkItemsTable(schemaName, tableName, alias string) *DemoTwoWorkItemsTable {
	return &DemoTwoWorkItemsTable{
		demoTwoWorkItemsTable: newDemoTwoWorkItemsTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newDemoTwoWorkItemsTableImpl("", "excluded", ""),
	}
}

func newDemoTwoWorkItemsTableImpl(schemaName, tableName, alias string) demoTwoWorkItemsTable {
	var (
		WorkItemIDColumn            = postgres.IntegerColumn("work_item_id")
		CustomDateForProject2Column = postgres.TimestampzColumn("custom_date_for_project_2")
		allColumns                  = postgres.ColumnList{WorkItemIDColumn, CustomDateForProject2Column}
		mutableColumns              = postgres.ColumnList{CustomDateForProject2Column}
	)

	return demoTwoWorkItemsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		WorkItemID:            WorkItemIDColumn,
		CustomDateForProject2: CustomDateForProject2Column,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
