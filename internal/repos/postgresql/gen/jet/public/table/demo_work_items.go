//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var DemoWorkItems = newDemoWorkItemsTable("public", "demo_work_items", "")

type demoWorkItemsTable struct {
	postgres.Table

	// Columns
	WorkItemID    postgres.ColumnInteger
	Ref           postgres.ColumnString
	Line          postgres.ColumnString
	LastMessageAt postgres.ColumnTimestampz
	Reopened      postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DemoWorkItemsTable struct {
	demoWorkItemsTable

	EXCLUDED demoWorkItemsTable
}

// AS creates new DemoWorkItemsTable with assigned alias
func (a DemoWorkItemsTable) AS(alias string) *DemoWorkItemsTable {
	return newDemoWorkItemsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DemoWorkItemsTable with assigned schema name
func (a DemoWorkItemsTable) FromSchema(schemaName string) *DemoWorkItemsTable {
	return newDemoWorkItemsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DemoWorkItemsTable with assigned table prefix
func (a DemoWorkItemsTable) WithPrefix(prefix string) *DemoWorkItemsTable {
	return newDemoWorkItemsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DemoWorkItemsTable with assigned table suffix
func (a DemoWorkItemsTable) WithSuffix(suffix string) *DemoWorkItemsTable {
	return newDemoWorkItemsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDemoWorkItemsTable(schemaName, tableName, alias string) *DemoWorkItemsTable {
	return &DemoWorkItemsTable{
		demoWorkItemsTable: newDemoWorkItemsTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newDemoWorkItemsTableImpl("", "excluded", ""),
	}
}

func newDemoWorkItemsTableImpl(schemaName, tableName, alias string) demoWorkItemsTable {
	var (
		WorkItemIDColumn    = postgres.IntegerColumn("work_item_id")
		RefColumn           = postgres.StringColumn("ref")
		LineColumn          = postgres.StringColumn("line")
		LastMessageAtColumn = postgres.TimestampzColumn("last_message_at")
		ReopenedColumn      = postgres.BoolColumn("reopened")
		allColumns          = postgres.ColumnList{WorkItemIDColumn, RefColumn, LineColumn, LastMessageAtColumn, ReopenedColumn}
		mutableColumns      = postgres.ColumnList{RefColumn, LineColumn, LastMessageAtColumn, ReopenedColumn}
	)

	return demoWorkItemsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		WorkItemID:    WorkItemIDColumn,
		Ref:           RefColumn,
		Line:          LineColumn,
		LastMessageAt: LastMessageAtColumn,
		Reopened:      ReopenedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
