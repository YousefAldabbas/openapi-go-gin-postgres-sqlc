// Code generated by openapi-generator. DO NOT EDIT.

package gen

import (
	"net/http"
	"regexp"
	"strings"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the route name.
	Name string
	// Method is the string for the HTTP method.
	Method string
	// Pattern is the URI pattern.
	Pattern string
	// Group is the router group.
	Group string
	// HandlerFunc is the handler function for this route.
	HandlerFunc gin.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

// RegisterRoute registers routes in the given router.
func RegisterRoutes(router *gin.RouterGroup, routes []Route, group string) {
	if reg, _ := regexp.Compile("/([a-z]+)"); !reg.MatchString(group) {
		panic("Invalid router group: " + group)
	}
	rGroup := router.Group(group)

	for _, r := range routes {
		p := strings.Replace(r.Pattern, group, "", 1)
		switch r.Method {
		case http.MethodGet:
			rGroup.GET(p, r.HandlerFunc)
		case http.MethodPost:
			rGroup.POST(p, r.HandlerFunc)
		case http.MethodPut:
			rGroup.PUT(p, r.HandlerFunc)
		case http.MethodPatch:
			rGroup.PATCH(p, r.HandlerFunc)
		case http.MethodDelete:
			rGroup.DELETE(p, r.HandlerFunc)
		}
	}
}
