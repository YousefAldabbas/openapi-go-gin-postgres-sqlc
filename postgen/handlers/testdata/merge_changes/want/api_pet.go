// Code generated by openapi-generator. DO NOT EDIT.

package handlers

import (
	"net/http"

	"github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/rest"
	services "github.com/danicc097/openapi-go-gin-postgres-sqlc/internal/services"
	"github.com/gin-gonic/gin"
)

// Pet handles routes with the pet tag.
type Pet struct {
	svc services.Pet
	// add your own services, etc. as required
}

// NewPet returns a new handler for pet.
// Edit as required
// TODO rewriting handler methods based on current postgen:
// see https://eli.thegreenplace.net/2021/rewriting-go-source-code-with-ast-tooling/
// simpler solutions based on drawbacks (complicated, comments not attached to nodes):
// - https://github.com/dave/dst
// - https://github.com/uber-go/gopatch
func NewPet(svc services.Pet) *Pet {
	return &Pet{
		svc: svc,
	}
}

// Register connects the handlers to a router with the given middleware.
func (t *Pet) Register(r *gin.RouterGroup, mws []gin.HandlerFunc) {
	routes := []rest.Route{
		{
			Name:        "AddPet",
			Method:      http.MethodPost,
			Pattern:     "/pet",
			HandlerFunc: t.addPet,
			Middlewares: []gin.HandlerFunc{},
		},
		{
			Name:        "DeletePet",
			Method:      http.MethodDelete,
			Pattern:     "/pet/:petId",
			HandlerFunc: t.deletePet,
			Middlewares: []gin.HandlerFunc{},
		},
		{
			Name:        "FindPetsByStatus",
			Method:      http.MethodGet,
			Pattern:     "/pet/findByStatus",
			HandlerFunc: t.findPetsByStatus,
			Middlewares: []gin.HandlerFunc{},
		},
		{
			Name:        "FindPetsByTags",
			Method:      http.MethodGet,
			Pattern:     "/pet/findByTags",
			HandlerFunc: t.findPetsByTags,
			Middlewares: []gin.HandlerFunc{},
		},
		{
			Name:        "GetPetById",
			Method:      http.MethodGet,
			Pattern:     "/pet/:petId",
			HandlerFunc: t.getPetById,
			Middlewares: []gin.HandlerFunc{},
		},
		{
			Name:        "UpdatePet",
			Method:      http.MethodPut,
			Pattern:     "/pet",
			HandlerFunc: t.updatePet,
			Middlewares: []gin.HandlerFunc{},
		},
		{
			Name:        "UpdatePetWithForm",
			Method:      http.MethodPost,
			Pattern:     "/pet/:petId",
			HandlerFunc: t.updatePetWithForm,
			// added middleware, would not want to lose it.
			Middlewares: []gin.HandlerFunc{rest.AuthMiddleware()},
		},
		{
			Name:        "UploadFile",
			Method:      http.MethodPost,
			Pattern:     "/pet/:petId/uploadImage",
			HandlerFunc: t.uploadFile,
			Middlewares: []gin.HandlerFunc{},
		},
		// this is a new handler added by hand.
		// I wouldnt care that much if this comment is deleted.
		// Order is not important
		{
			Name:        "NewHandler",
			Method:      http.MethodGet,
			Pattern:     "/pet/:petId/newHandlerGet",
			HandlerFunc: t.newHandlerGet,
			Middlewares: []gin.HandlerFunc{},
		},
		{
			Name:        "NewHandlerPost",
			Method:      http.MethodPost,
			Pattern:     "/pet/:petId/newHandlerPost",
			HandlerFunc: t.newHandlerPost,
			Middlewares: []gin.HandlerFunc{},
		},
	}

	rest.RegisterRoutes(r, routes, "/pet", mws)
}

// addPet add a new pet to the store.
func (t *Pet) addPet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// deletePet deletes a pet.
func (t *Pet) deletePet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// findPetsByStatus finds pets by status.
func (t *Pet) findPetsByStatus(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// findPetsByTags finds pets by tags.
// Deprecated
func (t *Pet) findPetsByTags(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// getPetById find pet by id.
func (t *Pet) getPetById(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// updatePet update an existing pet.
func (t *Pet) updatePet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// updatePetWithForm updates a pet in the store with form data.
func (t *Pet) updatePetWithForm(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// uploadFile uploads an image.
func (t *Pet) uploadFile(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// addPet add a new pet to the store.
func (t *Pet) newHandlerPost(c *gin.Context) {
	fmt.Println("this is the implementation for newHandlerPost")
}

// newHandlerGet was added by hand.
// This shouldn't be overriden/deleted in any case.
func (t *Pet) newHandlerGet(c *gin.Context) {
	fmt.Println("this is the implementation for newHandlerGet")
}

// this is an unused method. order is not important.
func (t *Pet) anUnusedHandler(c *gin.Context) {
	fmt.Println("this is the implementation for anUnusedHandler not used by any route")
}
